openapi: 3.0.1
info:
  contact:
    email: seitbekuulusalavat@gmail.com
    name: Salavat Seitbek uulu
    url: https://www.linkedin.com/in/salavat-seitbek-uulu-02178a1b7
  description: API for application Many
  title: Money Application API
  version: "1.0"
servers:
- description: Local server
  url: http://localhost:8080
- description: Prod server
  url: http://
paths:
  /sample/:
    get:
      operationId: getAll_1
      parameters:
      - in: query
        name: page
        required: false
        schema:
          type: integer
          format: int32
          default: 0
          minimum: 0
      - in: query
        name: size
        required: false
        schema:
          type: integer
          format: int32
          default: 25
          maximum: 100
          minimum: 1
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageSampleElement'
          description: OK
      tags:
      - sample-controller
    post:
      operationId: create_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SampleRequest'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SampleResponse'
          description: OK
      tags:
      - sample-controller
  /sample/list:
    get:
      operationId: getList_1
      responses:
        "200":
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SampleElement'
          description: OK
      tags:
      - sample-controller
  /sample/{id}:
    delete:
      operationId: delete_1
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
      tags:
      - sample-controller
    get:
      operationId: getById_1
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SampleResponse'
          description: OK
      tags:
      - sample-controller
    put:
      operationId: update_1
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SampleRequest'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SampleResponse'
          description: OK
      tags:
      - sample-controller
  /sample_dict/:
    get:
      operationId: getAll
      parameters:
      - in: query
        name: page
        required: false
        schema:
          type: integer
          format: int32
          default: 0
          minimum: 0
      - in: query
        name: size
        required: false
        schema:
          type: integer
          format: int32
          default: 25
          maximum: 100
          minimum: 1
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageSampleResponse'
          description: OK
      tags:
      - dict-sample-controller
    post:
      operationId: create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SampleRequest'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SampleResponse'
          description: OK
      tags:
      - dict-sample-controller
  /sample_dict/list:
    get:
      operationId: getList
      responses:
        "200":
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SampleResponse'
          description: OK
      tags:
      - dict-sample-controller
  /sample_dict/{id}:
    delete:
      operationId: delete
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
      tags:
      - dict-sample-controller
    get:
      operationId: getById
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SampleResponse'
          description: OK
      tags:
      - dict-sample-controller
    put:
      operationId: update
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SampleRequest'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SampleResponse'
          description: OK
      tags:
      - dict-sample-controller
components:
  schemas:
    PageSampleElement:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/SampleElement'
        empty:
          type: boolean
        first:
          type: boolean
        last:
          type: boolean
        number:
          type: integer
          format: int32
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/PageableObject'
        size:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
    PageSampleResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/SampleResponse'
        empty:
          type: boolean
        first:
          type: boolean
        last:
          type: boolean
        number:
          type: integer
          format: int32
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/PageableObject'
        size:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
    PageableObject:
      type: object
      properties:
        offset:
          type: integer
          format: int64
        pageNumber:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        paged:
          type: boolean
        sort:
          $ref: '#/components/schemas/SortObject'
        unpaged:
          type: boolean
    SampleElement:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
    SampleRequest:
      type: object
      properties:
        code:
          type: string
        name:
          type: string
    SampleResponse:
      type: object
      properties:
        code:
          type: string
        id:
          type: integer
          format: int32
        name:
          type: string
    SortObject:
      type: object
      properties:
        empty:
          type: boolean
        sorted:
          type: boolean
        unsorted:
          type: boolean
